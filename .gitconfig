[user]
    name = toejough
    email = toejough@gmail.com

[core]
    ignoresFile = /Users/joe/.gitignore
    excludesFile = /Users/joe/.gitignore
    editor = vim

[credential]
    helper = osxkeychain

[alias]
    # [ data ]
    name = rev-parse --abbrev-ref HEAD
    last-common-commit = merge-base HEAD
    has-local-changes-from = "!f() { if ( git fetch && git diff --quiet $(git last-common-commit $1) ); then test; fi }; f"
    has-changes-from-branch = "!git has-local-changes-from origin/$(git name)"
    has-changes-from-master = "!git has-local-changes-from origin/master"
    branches = branch -a
    tags = tag
    stashes = stash list
    graph = log --graph --branches --remotes --tags --topo-order --oneline --decorate
    raw-upstream = "!git for-each-ref --format='%(upstream:short)' $(git symbolic-ref -q HEAD)"
    upstream = "![[ -n $(git raw-upstream) ]] || ( echo 'no upstream branch set.' && test ) && git raw-upstream"

    # [ branch actions ]
    rename = "!f() { \
        printf '[*] identifying branch...'; \
        local NAME=\"$(git name)\"; \
        echo 'branch is:' \"$NAME\"; \
        echo '[*] renaming local branch to:' \"$1\"; \
        git branch -m \"$1\" && \
            echo '[*] pushing newly renamed branch to remote' && \
            git push origin --set-upstream \"$1\" && \
            echo '[*] removing old remote branch' && \
            git push origin :\"$NAME\"; \
    }; f"
    prune-dead-branches = "!git checkout master && git integrate-master && git remote prune origin; git branch --merged | egrep -v '^\\s*master$|^\\s*\\*.*' | xargs -L1 git branch -d && git branch -vv | ack ': gone' | awk '{print $1}' | xargs -L1 git branch -D"
    cleanup-from = "!f() { if git has-local-changes-from $1; then git rebase -i $(git last-common-commit $1); else echo 'Same as last common commit with '$1; fi }; f"

    # [ file state actions ]
    # unstage a staged file
    unstage = reset HEAD --
    # discard a file's changes
    discard = checkout --
    # undo last commit
    uncommit = reset --soft HEAD~
    # remove all local state
    nuke-local-state = "!git reset --hard origin/$(git name) && git clean -xdff"

    # [ workflow actions ]
    update-master = "!git checkout master && git fetch && git reset --hard origin/master"
    new-branch = "!f() { git checkout -b $1; git push --set-upstream origin $(git name); }; f"
    clean-local = "!git cleanup-from origin/$(git name)"
    integrate-branch = "!git fetch; git rebase origin/$(git name)"
    clean-branch = "!git cleanup-from origin/master"
    integrate-master = "!git fetch; git rebase origin/master"
    remove-local = "!f() { local NAME=\"$(git name)\" && git update-master && git branch -d \"${NAME}\"; }; f"

    # [ Force-push recovery ]
    recover-last-remote = "!git checkout -b recover.$(git name) && git reset --hard refs/remotes/origin/$(git name)@{1}; echo 'triple check this is the branch state you want, and then switch back to your branch, run git use-recovery-version and git integrate-master again."
    use-recovery-version = "!git reset --hard recover.$(git name); echo 'if you are really sure, git integrate-master.'"

    # [ Worktree ]
    workon-new = "!f() { local location=$(echo $1 | tr . -); git worktree add -b $1 ../$location $(git name); cd ../$location; git push -u origin $1; echo \"set up branch $1 at ../$location\"; }; f"
    workon-existing = "!f() { local location=$(echo $1 | tr . -); git worktree add ../$location $1; cd ../$location; git push -u origin $1; echo \"set up branch $1 at ../$location\"; }; f"
    parent = "!git rev-parse --git-dir | awk -F/ '{ print $(NF-3)  }'"

[push]
    default = simple

[commit]
    template = /Users/joe/.settings/git-commit-template.txt

[help]
    autocorrect = 20

[pull]
    ff = only
    rebase = preserve

[rebase]
    autosquash = true

[fetch]
    prune = true

[diff]
    compactionHeuristic = true

[pager]
    log = "diff-so-fancy | less --tabs=4 -RFX"
    show = "diff-so-fancy | less --tabs=4 -RFX"
    diff = "diff-so-fancy | less --tabs=4 -RFX"

[interactive]
    diffFilter = "diff-so-fancy | less --tabs=4 -RFX"
